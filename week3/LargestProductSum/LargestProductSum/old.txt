//
//  main.cpp
//  LargestProductSum
//
//  Created by Marc Tibbs on 2018/01/24.
//  Copyright Â© 2018 Marc Tibbs. All rights reserved.
//

#include <iostream>
#include <algorithm>
#include <cmath>
#include <vector>

#define SIZE 10

//int lookupChain(std::vector<std::vector<int>> &m, int p[], int i, int j);
//
//int proSum(int p[], int size){
//
//    int n = size - 1;
//
//    std::vector<std::vector<int>> m(size, std::vector<int>(size));
//
//    for (int i = 1; i < size; i++){
//        for (int j = 1; j < size; j++){
//            m[i][j] = INFINITY;
//        }
//    }
//    return lookupChain(m, p, 1, n);
//}
//
//int lookupChain(std::vector<std::vector<int>> &m, int p[], int i, int j){
//    int q = 0;
//
//    if (m[i][j] < INFINITY){
//        return m[i][j];
//    }
//    else if (i == j){
//        m[i][j] = 0;
//    }
//    else {
//        for (int k = i; k < j - 1; k++){
//            q = lookupChain(m, p, i, k) + lookupChain(m, p, k+1, j);// + p[i-1]*p[k]*p[j];
//        }
//
//        if (q > m[i][j]){
//            m[i][j] = q;
//        }
//    }
//    return m[i][j];
//}

int proSum(int p[], int i, int j){
    if(i == j)
        return 0;
    
    int m[j][j];
    int q = 0;
    
    for (int x = 0; x < j; x++){
        for(int y = 0; y < j; y++){
            m[x][y] = INFINITY;
        }
    }
    
    for (int k = i; k < j-1; j++){
        q = proSum(p, i, k) + proSum(p, k+1, j) + p[i-1]*p[k]*p[j];
        if (q < m[i][j])
            m[i][j] = q;
    }
    return m[i][j];
}

int main(int argc, const char * argv[]) {
    int test[4] = {4,3,2,8};
    //    int test2[10] = {2, 2, 1, 3, 2, 1, 2, 2, 1, 2};
    //    int test3[7] = {2, 1, 3, 5, 1, 4, 2};
    //    int test4[6] = {3, 2, 4, 2, 3, 4};
    
    std::cout << proSum(test, 0, 4);
    std::cout << std::endl;
    //    std::cout << proSum(test2, 0, 10);
    //    std::cout << std::endl;
    //    std::cout << proSum(test3, 0, 7);
    //    std::cout << std::endl;
    //    std::cout << proSum(test4, 0, 6);
    //    std::cout << std::endl;
    
    return 0;
}
