//
//  main.cpp
//  makeChange
//
//  Created by Marc Tibbs on 2018/01/26.
//  Copyright Â© 2018 Marc Tibbs. All rights reserved.
//

#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>


std::vector<int> makeChange(int vals[], int size, int A){

//return vector
std::vector<int> final(size);

//vector to track coin amts
std::vector<int> track(A + 1);

//array to store results
int arr[A+1];

//base case
arr[0] = 0;

//arr[i] = inf
for (int i = 1; i <= A; i++) {
arr[i] = std::numeric_limits<int>::max();;
}

//for i = 1 to A
for (int i = 1; i <= A; i++){

//test vals < i
for (int j = 0; j < size; j++){

if (vals[j] <= i){
int change = arr[i-vals[j]];

//store result in arr
if (change + 1 < arr[i] && change < std::numeric_limits<int>::max()){
arr[i] = change + 1;
track[i] = j;

}
}
}
}

int j = A;
while(j > 0){
final.at(track[j])++;
j = j - vals[track[j]];
}

final.push_back(arr[A]);

return final;
}


int main(int argc, const char * argv[]) {

std::ifstream infile("amount.txt");
std::ofstream outfile("change.txt");
int lineCounter = 0, amount = 0;
std::vector<int> vArr;
std::vector<int> vFin;

if(infile){

std::string str;
while(getline(infile, str)){

std::istringstream ss(str);
int num;

if (lineCounter % 2 == 0){
while(ss >> num){
vArr.push_back(num);
}
lineCounter++;
}
else{
while(ss >> num){
amount = num;

for (std::vector<int>::const_iterator i = vArr.begin(); i != vArr.end(); ++i) std::cout << *i << ' ';
std::cout << std::endl;

for (std::vector<int>::const_iterator i = vArr.begin(); i != vArr.end(); ++i) outfile << *i << ' ';
outfile << std::endl;


std::cout << amount << std::endl;
outfile << amount << std::endl;

vFin = makeChange(&vArr[0], int(vArr.size()), amount);

int noc = vFin.back();
vFin.pop_back();

for (std::vector<int>::const_iterator i = vFin.begin(); i != vFin.end(); ++i) std::cout << *i << ' ';
std::cout << std::endl;

for (std::vector<int>::const_iterator i = vFin.begin(); i != vFin.end(); ++i) outfile << *i << ' ';
outfile << std::endl;

std::cout << noc << std::endl;
outfile << noc << std::endl;

vArr.clear();
vFin.clear();
}
lineCounter++;
}

}

outfile.close();
}
else
std::cout << "File could not be opened." << std::endl;

return 0;
}
